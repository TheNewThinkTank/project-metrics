{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>TODOs: - look into automations around git-truck     run from cli: <code>npx -y git-truck</code> - Automate performance profiling (cProfile, snakeviz etc.)</p>"},{"location":"BENCHMARKS/","title":"Performance benchmarks","text":"type total_wf_time total_job_time total_step_time workflow_name workflow_file commit ID workflow_run_number serial 2m 8s 1m 57s 1m 26s <code>Project Metrics Workflow</code> <code>wf.yml</code> 5294192eb66667f978ad335a9cfd9278e90ff196 318 parallel 2m 3s 1m 26s 51s (25s of <code>get_gh_repo_names</code> job plus 26s for longest downstream processing job, <code>update_repos (AACT-Analysis)</code>) <code>Matrix strategy - Update GH repos</code> <code>matrix_update_gh_repos.yml</code> 5294192eb66667f978ad335a9cfd9278e90ff196 3 threading 1m 16s 1m 6s 33s <code>Threading - Update GH repos</code> <code>threading_update_gh_repos.yml</code> 5294192eb66667f978ad335a9cfd9278e90ff196 2"},{"location":"BENCHMARKS/#notes","title":"Notes","text":"<p>The main job to compare, <code>update_repos</code>:</p> <p>GitHub Actions matrix strategy with workflow <code>matrix_update_gh_repos.yml</code>: one API requests per repo, very inefficient, but ~2 seconds per repo processing on average. There is a large Parallel Execution Overhead due to process creation, context switching, and synchronization. mainly useful if program is CPU bound, but in this case code is mostly IO bound.</p>"},{"location":"BENCHMARKS/#conclusion","title":"Conclusion","text":"<p>The comparison (processing 32 public GitHub repos) shows threading as the most optimal strategy, and indicates that program execution is mostly IO bound.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":"<ul> <li> <p>Statistics and health badges   (commit activity, repo size, code test coverage, documentation status, CI health of workflows)</p> </li> <li> <p>Barplots grouping repos by size, sectioned into 4 categories (large, medium, small, smallest)</p> </li> <li> <p>Linecharts showing commits over time</p> </li> <li> <p>Sphinx auto doc, with doc hosting on readthedocs: project-metrics</p> </li> <li> <p>Automatically checking for updates using <code>Dependabot</code>:</p> </li> <li><code>pip</code> (monthly)</li> <li> <p><code>GitHub Actions</code> (weekly)</p> </li> <li> <p>GitHub Actions workflow <code>wf.yml</code>.NB: as the repo updates itself, the only trigger should be <code>workflow_dispatch</code> to avoid recursive workflow invocation.</p> </li> <li>The workflow contains the following jobs:</li> <li> <p><code>qualify_code</code>:</p> <ul> <li>static type checking with <code>mypy</code></li> <li>code linting with <code>flake8</code> and <code>ruff</code></li> <li>spell checking of README</li> <li>linting of YAML files</li> <li>software complexity metrics with <code>wily</code></li> <li>unit tests with <code>pytest</code></li> <li>code coverage reporting</li> <li>caching of <code>poetry</code> and <code>mypy</code> dependencies</li> </ul> </li> <li> <p><code>get_metrics</code>:</p> <ul> <li>updates this repo's README (links above) with following projects metrics:</li> <li>top 10 most popular GitHub repos, by star count</li> <li>repos lacking any description, across <code>GitHub</code> and <code>GitLab</code></li> <li>repos grouped by programming language</li> </ul> </li> <li> <p><code>update_repos</code>:</p> <ul> <li>updates all GitHub repos:</li> <li>All GitHub repos (including this one) get a repo size badge on top of their README     NB: does not affect the GitHub profile page, which is a special repo.</li> <li>support for both <code>.md</code> and <code>.rst</code> files</li> <li>All GitHub repos gets a GitHub Actions workflow, <code>.github/workflows/wf.yml</code>,     containing linting for Python and/or TypeScript code,     as well as a CI badge on their README</li> </ul> </li> </ul> <p>the last job, <code>update_repos</code>, is further performance tested and a comparison of parallel and threading versions are provided alongside the serial (for-loop) version: - Performance Benchmarks</p>"},{"location":"CHANGELOG/#note-on-graphql","title":"Note on GraphQL","text":"<p>Useful explorer for testing out GraphQL queries: - GitHub GraphQL API Explorer</p>"},{"location":"CHANGELOG/#upcoming-features","title":"Upcoming features","text":"<ul> <li>linting of R scripts with <code>lintr</code></li> <li>cleanup script: <code>remove_badge.py</code></li> <li>setup a single, reusable base workflow (poetry setup etc.)</li> <li>identify public repos without any README (e.g. 'web-application-jquery-and-bootstrap')</li> <li>security scannings with bandit (searching for API keys etc.)</li> <li>filter repos by number of users, descendingly</li> <li>getting codecov above 50 %</li> <li>improve &amp; extend documentation on <code>readthedocs</code></li> <li>alphabetic sorting of words in <code>config/.wordlist.txt</code></li> <li>group by category (using tags), e.g. health (nutrition, fitness, athlete profiler)</li> <li>group by created_at, display newest and oldest repos</li> <li>check if repos have tests</li> <li>if so, setup codecov badge on their README's</li> <li>if not, set up pytest, perhaps using <code>cookiecutter</code> / <code>cruft</code> or custom template</li> </ul>"},{"location":"OKRs/OKRs-2025-Q2/","title":"OKRs for 2025 Q2","text":""},{"location":"OKRs/OKRs-2025-Q2/#objective-1-maintain-high-code-quality-across-all-projects","title":"Objective 1: Maintain High Code Quality Across All Projects","text":""},{"location":"OKRs/OKRs-2025-Q2/#key-results","title":"Key Results","text":"<ul> <li>KR1: Achieve at least 80% unit test coverage for all Python-based projects by 2025-07-01.     Measure: Average test coverage percentage across all Python projects.</li> <li>KR2: Ensure 70% unit test coverage for TypeScript and Go projects by 2025-07-01.     Measure: Average test coverage percentage across TypeScript and Go projects.</li> <li>KR3: Implement static code analysis tools in 95% of repositories by 2025-07-01.     Measure: Percentage of repositories with static analysis tools integrated.</li> <li>KR4: Reduce the number of open issues labeled as \"bug\" or \"critical\" by 50% across all repositories by 2025-07-01.     Measure: Total count of open critical bugs before and after the target period.</li> <li>KR5: Maintain up-to-date changelogs using standardized commit messages (e.g., Commitizen) in 90% of repositories by 2025-07-01.     Measure: Percentage of repositories with properly maintained changelogs.</li> </ul>"},{"location":"OKRs/OKRs-2025-Q2/#objective-2-improve-repository-documentation-and-onboarding","title":"Objective 2: Improve Repository Documentation and Onboarding","text":""},{"location":"OKRs/OKRs-2025-Q2/#key-results_1","title":"Key Results","text":"<ul> <li>KR1: Add or update README files in 100% of repositories by 2025-07-01.</li> <li>KR2: Create and publish a contributor guide for new contributors by 2025-07-01.</li> <li>KR3: Set up automated CI/CD pipelines in 50% of repositories by 2025-07-01.</li> </ul>"},{"location":"OKRs/OKRs-2025-Q2/#objective-3-enhance-project-sustainability-and-community-engagement","title":"Objective 3: Enhance Project Sustainability and Community Engagement","text":""},{"location":"OKRs/OKRs-2025-Q2/#key-results_2","title":"Key Results","text":"<ul> <li>KR1: Increase the average number of monthly contributions from external contributors by 20% by 2025-07-01.</li> <li>KR2: Respond to 90% of issues and pull requests within 7 days by 2025-07-01.</li> <li>KR3: Publish two technical blog posts or tutorials related to your projects every quarter by 2025-07-01.</li> </ul>"},{"location":"OKRs/OKRs-2025-Q2/#progress-tracking","title":"Progress Tracking","text":"Objective Key Result Target Current Status Notes Obj 1 KR1 80% 65% Working on adding tests to older projects. Obj 1 KR2 70% 50% Focusing on TypeScript projects first. Obj 1 KR3 ... ... ... Obj 1 KR4 ... ... ... Obj 1 KR5 90% 60% Integrated Commitizen in 30 repos; working on remaining ones."},{"location":"SOPs/SOP-2025/","title":"Standard Operating Procedure (SOP) for Managing Software Projects","text":""},{"location":"SOPs/SOP-2025/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Project Setup</li> <li>Code Quality Standards</li> <li>Testing Requirements</li> <li>Documentation Standards</li> <li>Issue Management</li> <li>Pull Request Process</li> <li>Deployment Process</li> <li>Community Engagement</li> </ol>"},{"location":"SOPs/SOP-2025/#1-project-setup","title":"1. Project Setup","text":""},{"location":"SOPs/SOP-2025/#repository-initialization","title":"Repository Initialization","text":"<ul> <li>Create a new repository on GitHub.</li> <li>Add required files: <code>README.md</code>, <code>.gitignore</code>, <code>LICENSE</code>, <code>CONTRIBUTING.md</code>.</li> </ul>"},{"location":"SOPs/SOP-2025/#branching-strategy","title":"Branching Strategy","text":"<ul> <li>Main branch: <code>main</code> or <code>master</code>.</li> <li>Feature branches: <code>feature/&lt;name&gt;</code>.</li> <li>Hotfix branches: <code>hotfix/&lt;name&gt;</code>.</li> </ul> <p>...</p>"},{"location":"SOPs/SOP-2025/#2-code-quality-standards","title":"2. Code Quality Standards","text":""},{"location":"SOPs/SOP-2025/#coding-guidelines","title":"Coding Guidelines","text":"<ul> <li>Python: Follow PEP 8 style guide.</li> <li>TypeScript: Use ESLint with recommended configurations.</li> <li>Go: Adhere to Go formatting standards (<code>gofmt</code>).</li> </ul>"},{"location":"SOPs/SOP-2025/#static-analysis","title":"Static Analysis","text":"<ul> <li>Integrate tools like <code>flake8</code> (Python), <code>ESLint</code> (TypeScript), and <code>golangci-lint</code> (Go).</li> </ul> <p>...</p>"},{"location":"SOPs/SOP-2025/#3-testing-requirements","title":"3. Testing Requirements","text":""},{"location":"SOPs/SOP-2025/#unit-tests","title":"Unit Tests","text":"<ul> <li>Write unit tests for all critical functionality.</li> <li>Aim for at least 80% coverage for Python projects and 70% for TypeScript/Go projects.</li> </ul>"},{"location":"SOPs/SOP-2025/#integration-tests","title":"Integration Tests","text":"<ul> <li>Include integration tests where applicable.</li> </ul>"},{"location":"SOPs/SOP-2025/#test-automation","title":"Test Automation","text":"<ul> <li>Ensure tests are run automatically via CI/CD pipelines.</li> <li>Use tools like pytest (Python), Jest (TypeScript), and go test (Go).</li> </ul>"},{"location":"SOPs/SOP-2025/#4-documentation-standards","title":"4. Documentation Standards","text":""},{"location":"SOPs/SOP-2025/#readme-template","title":"README Template","text":"<p>Include sections for:</p> <ul> <li>Project description</li> <li>Installation instructions</li> <li>Usage examples</li> <li>Contribution guidelines</li> <li>License information</li> </ul>"},{"location":"SOPs/SOP-2025/#api-documentation","title":"API Documentation","text":"<ul> <li>Use tools like Sphinx (Python), JSDoc (TypeScript), or Swagger for API documentation.</li> </ul>"},{"location":"SOPs/SOP-2025/#contributor-guide","title":"Contributor Guide","text":"<ul> <li>Provide clear steps for setting up the development environment, submitting pull requests, and reporting issues.</li> </ul>"},{"location":"SOPs/SOP-2025/#5-issue-management","title":"5. Issue Management","text":""},{"location":"SOPs/SOP-2025/#labeling-conventions","title":"Labeling Conventions","text":"<p>Use labels such as bug, enhancement, documentation, critical, etc.</p>"},{"location":"SOPs/SOP-2025/#issue-templates","title":"Issue Templates","text":"<p>Define templates for bug reports and feature requests.</p>"},{"location":"SOPs/SOP-2025/#response-time","title":"Response Time","text":"<p>Aim to respond to issues within 7 days.</p>"},{"location":"SOPs/SOP-2025/#6-pull-request-process","title":"6. Pull Request Process","text":""},{"location":"SOPs/SOP-2025/#code-review-guidelines","title":"Code Review Guidelines","text":"<ul> <li>Ensure all PRs are reviewed by at least one other person (if possible).</li> <li>Check for adherence to coding standards, test coverage, and documentation updates.</li> </ul>"},{"location":"SOPs/SOP-2025/#merge-criteria","title":"Merge Criteria","text":"<ul> <li>All tests must pass.</li> <li>Code must meet quality standards.</li> <li>Documentation must be updated if needed.</li> </ul>"},{"location":"SOPs/SOP-2025/#7-deployment-process","title":"7. Deployment Process","text":""},{"location":"SOPs/SOP-2025/#cicd-configuration","title":"CI/CD Configuration","text":"<ul> <li>Set up automated builds and deployments using GitHub Actions, Jenkins, or similar tools.</li> </ul>"},{"location":"SOPs/SOP-2025/#release-notes","title":"Release Notes","text":"<ul> <li>Maintain release notes in the CHANGELOG.md file.</li> <li>Follow semantic versioning (e.g., major.minor.patch).</li> </ul>"},{"location":"SOPs/SOP-2025/#8-community-engagement","title":"8. Community Engagement","text":""},{"location":"SOPs/SOP-2025/#responding-to-contributions","title":"Responding to Contributions","text":"<ul> <li>Acknowledge contributions promptly.</li> <li>Provide constructive feedback during reviews.</li> </ul>"},{"location":"SOPs/SOP-2025/#encouraging-new-contributors","title":"Encouraging New Contributors","text":"<ul> <li>Label beginner-friendly issues with good first issue.</li> <li>Offer mentorship when possible.</li> </ul>"},{"location":"SOPs/SOP-2025/#9-casing-conventions","title":"9. Casing Conventions","text":"<p>Consistent naming conventions improve clarity and reduce errors. Follow these guidelines for repository names, file names, environment variables, and other identifiers.</p>"},{"location":"SOPs/SOP-2025/#repository-names","title":"Repository Names","text":"<ul> <li>Use lowercase letters only.</li> <li>Separate words with dashes (<code>-</code>).</li> <li>Example: <code>my-awesome-project</code></li> </ul>"},{"location":"SOPs/SOP-2025/#file-names","title":"File Names","text":"<ul> <li>Use lowercase letters for all file names.</li> <li>Separate words with dashes (<code>-</code>) for non-code files.</li> <li>Use snake_case for code files.</li> <li>Examples:<ul> <li>Documentation: <code>contributing-guide.md</code></li> <li>Python Code: <code>data_processing.py</code></li> <li>TypeScript Code: <code>user-service.ts</code></li> </ul> </li> </ul>"},{"location":"SOPs/SOP-2025/#environment-variables","title":"Environment Variables","text":"<ul> <li>Use uppercase letters only.</li> <li>Separate words with underscores (<code>_</code>).</li> <li>Prefix variables with a project-specific identifier if applicable.</li> <li>Examples:<ul> <li><code>MY_PROJECT_DB_HOST</code></li> <li><code>API_KEY</code></li> </ul> </li> </ul>"},{"location":"SOPs/SOP-2025/#class-names-code","title":"Class Names (Code)","text":"<ul> <li>Use PascalCase for class names in all languages.</li> <li>Examples:<ul> <li>Python: <code>UserDataProcessor</code></li> <li>TypeScript: <code>UserService</code></li> <li>Go: <code>UserManager</code></li> </ul> </li> </ul>"},{"location":"SOPs/SOP-2025/#functionmethod-names","title":"Function/Method Names","text":"<ul> <li>Use camelCase for function and method names.</li> <li>Examples:<ul> <li>Python: <code>processUserData()</code></li> <li>TypeScript: <code>getUserDetails()</code></li> <li>Go: <code>calculateTotal()</code></li> </ul> </li> </ul>"},{"location":"SOPs/SOP-2025/#constants","title":"Constants","text":"<ul> <li>Use UPPER_SNAKE_CASE for constants.</li> <li>Examples:<ul> <li>Python: <code>MAX_RETRIES = 5</code></li> <li>TypeScript: <code>const MAX_RETRIES = 5;</code></li> <li>Go: <code>const MaxRetries = 5</code></li> </ul> </li> </ul>"},{"location":"SOPs/SOP-2025/#database-table-and-column-names","title":"Database Table and Column Names","text":"<ul> <li>Use snake_case for table and column names.</li> <li>Examples:<ul> <li>Table: <code>user_data</code></li> <li>Column: <code>created_at</code></li> </ul> </li> </ul>"},{"location":"SOPs/SOP-2025/#branch-names","title":"Branch Names","text":"<ul> <li>Use lowercase letters.</li> <li>Separate words with dashes (<code>-</code>).</li> <li>Examples:<ul> <li>Feature branch: <code>feature/add-login-page</code></li> <li>Hotfix branch: <code>hotfix/fix-bug-123</code></li> </ul> </li> </ul>"},{"location":"SOPs/SOP-2025/#commit-messages","title":"Commit Messages","text":"<ul> <li>Use imperative mood for commit messages.</li> <li>Keep the first line concise (&lt;50 characters) and capitalize the first letter.</li> <li>Use lowercase for the rest of the message body.</li> <li> <p>Example:</p> <pre><code>Fix user authentication issue\n\nUpdated the login logic to handle edge cases properly.\n</code></pre> </li> </ul>"},{"location":"SOPs/changelog-SOP/","title":"Changelog Standards","text":"<p>Maintaining a changelog helps track changes between releases, improving transparency and usability for contributors and users. Follow these guidelines to ensure consistency:</p> <ol> <li> <p>Changelog File:</p> </li> <li> <p>Name the file <code>CHANGELOG.md</code>.</p> </li> <li>Use the (Keep a Changelog)[https://keepachangelog.com/en/1.0.0/?spm=5aebb161.2ef5001f.0.0.14b05171VnhK3Q] format for structure.</li> <li> <ul> <li>Example:</li> </ul> </li> </ol> <pre><code>## [Unreleased]\n- Added new feature X.\n- Fixed issue Y.\n\n## [1.0.1] - 2024-01-15\n- Fixed bug Z.\n\n## [1.0.0] - 2024-01-01\n- Initial release.\n</code></pre> <ol> <li> <p>Commit Message Standards:</p> </li> <li> <p>Use structured commit messages to facilitate automatic changelog generation.</p> </li> <li>Adopt the Conventional Commits specification: <code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code>.</li> <li> <ul> <li>Types: <code>feat</code> (new feature), <code>fix</code> (bug fix), <code>docs</code> (documentation), <code>style</code> (formatting), <code>refactor</code>, <code>test</code>, etc.</li> </ul> </li> <li> <ul> <li>Example: <code>feat(user): add login functionality</code>.</li> </ul> </li> <li> <p>Tools for Standardization:</p> </li> <li> <p>Use Commitizen to enforce consistent commit messages.</p> </li> <li> <ul> <li>Install Commitizen globally: <code>npm install -g commitizen cz-conventional-changelog</code>.</li> </ul> </li> <li> <ul> <li>Configure your repository to use Commitizen:</li> </ul> </li> </ol> <pre><code>// package.json\n{\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  }\n}\n</code></pre> <p>Run <code>git cz</code> instead of <code>git commit</code> to interactively create standardized commits.</p> <ol> <li> <p>Automated Changelog Generation:</p> </li> <li> <p>Use tools like <code>standard-version</code> or <code>conventional-changelog</code> to automatically generate changelogs based on commit history.</p> </li> <li> <ul> <li>Example with <code>standard-version</code>:</li> </ul> </li> </ol> <pre><code>npm install --save-dev standard-version\nnpx standard-version\n</code></pre> <ol> <li> <p>Release Process:</p> </li> <li> <p>Update the <code>CHANGELOG.md</code> file during each release.</p> </li> <li>Include all relevant changes grouped by type (<code>Added</code>, <code>Changed</code>, <code>Deprecated</code>, <code>Removed</code>, <code>Fixed</code>, <code>Security</code>).</li> </ol>"},{"location":"code-analysis/kpi_N-body-simulations/","title":"N-body-simulations KPIs","text":"<p>logging timestamp: 2025-07-09 01:08:07.685678</p> Python scripts total code lines total PEP-8 violations 47 31517 2883 Module name lines PEP-8 Violations <code>src/Energy_exchange/Energy_exchange_gamma_kappa_beta.py</code> 6034 485 <code>src/VDF/readVDF2.py</code> 4473 267 <code>src/VDF/readVDF_2_new_plot.py</code> 3627 187 <code>src/General/velocity_check.py</code> 1685 137 <code>src/Attractor/time_evolution_gamma_kappa_beta.py</code> 1631 103 <code>src/VDF/VDFnetwork.py</code> 1627 186 <code>src/Attractor/gamma_kappa_beta.py</code> 1394 141 <code>src/Attractor/Sigma_plot.py</code> 1037 33 <code>src/Energy_exchange/Sigma_Delta_G_to_Delta_E.py</code> 851 119 <code>src/Energy_exchange/Energy_exchange_sigma.py</code> 808 52 <code>src/File_lists/readVDF_2_new_files.py</code> 768 281 <code>src/VDF/VDF_LOS.py</code> 759 49 <code>src/File_lists/file_lists_energy.py</code> 597 161 <code>src/File_lists/read_VDF2_file_list.py</code> 589 45 <code>src/Attractor/Sigma_calc_OOP.py</code> 567 38 <code>src/VDF/VDFvelocityBins.py</code> 457 83 <code>src/Energy_exchange/Energy_exchange_sigma_mass_bins.py</code> 425 13 <code>src/File_lists/file_lists.py</code> 416 136 <code>src/VDF/VDF.py</code> 352 59 <code>src/Energy_exchange/Energy_perturbation_test.py</code> 333 19 <code>src/General/rho_gaussian_and_tsallis.py</code> 320 31 <code>src/bin_halo_legacy.py</code> 288 17 <code>src/File_lists/snapshot_files.py</code> 270 1 <code>src/Energy_exchange/Energy_perturbation_only_rand_test.py</code> 242 7 <code>src/Attractor/Read.py</code> 234 30 <code>src/VDF/v_spherical_and_v_bins.py</code> 210 6 <code>src/Maintenance/rename.py</code> 202 11 <code>src/General/bin_halo.py</code> 154 13 <code>src/General/Gammas_and_R_middles.py</code> 127 43 <code>src/VDF/readVDF.py</code> 121 24 <code>src/Energy_exchange/Energy_exchange_D1.py</code> 115 11 <code>src/VDF/splitVDFt.py</code> 105 7 <code>src/Maintenance/regex_upper.py</code> 98 8 <code>src/General/load_halo.py</code> 95 10 <code>src/Maintenance/pylab_test.py</code> 92 8 <code>src/File_lists/data_lists.py</code> 83 22 <code>src/General/Remove_free_particles.py</code> 81 1 <code>src/General/radius_and_velocity_funcs.py</code> 73 11 <code>src/General/Mock_data.py</code> 56 3 <code>src/General/no_of_particles_and_particle_mass.py</code> 29 5 <code>src/Maintenance/request_data.py</code> 23 3 <code>src/General/create_snapshot.py</code> 22 4 <code>src/File_lists/define_paths.py</code> 14 1 <code>src/Maintenance/terminal_code.py</code> 14 8 <code>test/test_read.py</code> 9 2 <code>src/General/colors_and_symbols.py</code> 6 1 <code>src/modulus.py</code> 4 1"},{"location":"code-analysis/kpi_fitness-tracker/","title":"fitness-tracker KPIs","text":"<p>logging timestamp: 2025-07-09 01:07:41.902882</p> Python scripts total code lines total PEP-8 violations 65 5749 693 Module name lines PEP-8 Violations <code>src/combined_metrics/combined_metrics.py</code> 342 45 <code>src/crud/insert.py</code> 223 34 <code>src/crud/read.py</code> 197 18 <code>src/utils/validate.py</code> 194 27 <code>src/model/model.py</code> 189 14 <code>src/plot.py</code> 187 10 <code>src/model/plot_model.py</code> 186 24 <code>oxygen/oxygen/cli.py</code> 182 13 <code>test/model/test_model.py</code> 182 9 <code>src/combined_metrics/plot_frequency.py</code> 173 6 <code>test/utils/test_validate.py</code> 172 27 <code>src/one_rep_max_plot.py</code> 169 21 <code>src/rep_range/rep_range.py</code> 146 5 <code>test/crud/test_read.py</code> 142 14 <code>test/utils/test_get_workout_duration.py</code> 136 5 <code>src/simulations/workout_simulator.py</code> 135 26 <code>test/crud/test_insert.py</code> 135 28 <code>test/utils/test_set_db_and_table.py</code> 129 10 <code>src/utils/get_breath_holding.py</code> 121 17 <code>src/utils/set_db_and_table.py</code> 113 12 <code>src/crud/update.py</code> 109 10 <code>src/utils/get_volume.py</code> 109 11 <code>src/utils/get_workout_duration.py</code> 105 7 <code>src/main.py</code> 102 10 <code>test/test_one_rep_max_calc.py</code> 95 15 <code>src/one_rep_max_calc.py</code> 91 27 <code>src/utils/google_sheet.py</code> 89 6 <code>test/simulations/test_workout_simulator.py</code> 87 12 <code>src/simulations/simulate_data.py</code> 79 9 <code>docs/sphinx-docs/source/conf.py</code> 76 6 <code>src/utils/file_conversions/json_to_csv.py</code> 72 5 <code>test/utils/file_conversions/test_json_to_csv.py</code> 67 27 <code>test/crud/test_update.py</code> 63 8 <code>test/utils/test_google_sheet.py</code> 63 7 <code>src/utils/get_program.py</code> 62 6 <code>test/test_one_rep_max.py</code> 61 17 <code>test/test_anomaly_detection.py</code> 60 11 <code>src/one_rep_max.py</code> 57 6 <code>src/utils/config.py</code> 54 10 <code>src/utils/custom_storage.py</code> 54 8 <code>src/crud/delete.py</code> 52 6 <code>src/anomaly_detection.py</code> 51 6 <code>src/combined_metrics/get_frequency_data.py</code> 45 4 <code>src/utils/get_exercises.py</code> 45 5 <code>test/simulations/test_simulate_data.py</code> 45 11 <code>test/utils/test_get_exercises.py</code> 43 7 <code>src/utils/logger_config.py</code> 42 3 <code>src/utils/get_bodyweight.py</code> 39 7 <code>features/steps/lookup.py</code> 38 6 <code>src/utils/create_exercise_catalog.py</code> 33 4 <code>features/steps/get_program.py</code> 31 5 <code>features/steps/validate.py</code> 31 6 <code>src/utils/powerbands.py</code> 30 6 <code>features/steps/model.py</code> 29 6 <code>test/model/test_plot_model.py</code> 26 1 <code>test/crud/test_training.py</code> 22 4 <code>src/utils/cleanup.py</code> 21 3 <code>src/utils/file_conversions/json_to_yaml.py</code> 21 4 <code>src/user_settings.py</code> 20 2 <code>test/conftest.py</code> 20 6 <code>oxygen/setup.py</code> 16 1 <code>src/utils/file_conversions/load_yaml.py</code> 16 2 <code>src/utils/get_split.py</code> 11 2 <code>src/simulations/simulate_people.py</code> 7 1 <code>test/utils/test_get_program.py</code> 7 2"},{"location":"code-analysis/kpi_project-metrics/","title":"project-metrics KPIs","text":"<p>logging timestamp: 2025-07-09 01:06:53.185082</p> Python scripts total code lines total PEP-8 violations 34 2619 250 Module name lines PEP-8 Violations <code>src/add_gha_wf.py</code> 226 23 <code>src/kpi.py</code> 177 20 <code>src/REST/get_repos.py</code> 177 14 <code>test/test_add_gha_wf.py</code> 150 12 <code>src/REST/add_badge.py</code> 143 10 <code>src/get_repo_size.py</code> 141 11 <code>src/REST/project_metrics.py</code> 112 11 <code>src/REST/commits_over_time.py</code> 110 10 <code>src/GraphQL/gh_get_largest_repos.py</code> 96 8 <code>test/test_readme_sentiment.py</code> 82 10 <code>src/GraphQL/gh_group_by_lang.py</code> 81 5 <code>test/test_wily_to_md.py</code> 79 7 <code>src/threading_add_gha_wf.py</code> 77 9 <code>src/wily_to_md.py</code> 77 9 <code>src/REST/group_by_tag.py</code> 75 6 <code>src/GraphQL/gh_get_popular_repos.py</code> 72 5 <code>src/util/get_gh_repo_content.py</code> 71 7 <code>test/test_get_gh_repos.py</code> 65 4 <code>test/test_get_readme_format.py</code> 57 5 <code>src/readme_sentiment.py</code> 53 4 <code>docs/sphinx-docs/conf.py</code> 49 2 <code>src/save_file_to_github.py</code> 48 4 <code>src/get_badge.py</code> 45 4 <code>test/test_get_badge.py</code> 43 9 <code>src/util/get_gh_repos.py</code> 43 8 <code>test/test_repo_has_lang.py</code> 42 4 <code>src/config.py</code> 38 6 <code>src/util/matrix_repos.py</code> 34 6 <code>src/remove_badge.py</code> 31 2 <code>src/REST/threading_add_badge.py</code> 28 5 <code>src/matrix_add_badge.py</code> 27 3 <code>src/GraphQL/gh_graphql_post.py</code> 25 3 <code>src/util/get_readme_format.py</code> 23 2 <code>src/util/repo_has_lang.py</code> 22 2"},{"location":"code-analysis/wily-loc/","title":"wily-loc","text":"File Lines of Code src/util/repo_has_lang.py 22 src/util/get_readme_format.py 23 src/GraphQL/gh_graphql_post.py 25 src/matrix_add_badge.py 27 src/REST/threading_add_badge.py 28 src/remove_badge.py 31 src/util/matrix_repos.py 34 src/config.py 38 src/util/get_gh_repos.py 43 src/get_badge.py 45 src/save_file_to_github.py 48 src/readme_sentiment.py 53 src/util/get_gh_repo_content.py 71 src/GraphQL/gh_get_popular_repos.py 72 src/REST/group_by_tag.py 75 src/wily_to_md.py 77 src/threading_add_gha_wf.py 77 src/GraphQL/gh_group_by_lang.py 81 src/GraphQL/gh_get_largest_repos.py 96 src/REST/commits_over_time.py 110 src/REST/project_metrics.py 112 src/get_repo_size.py 141 src/REST/add_badge.py 143 src/kpi.py 177 src/REST/get_repos.py 177 src/add_gha_wf.py 226 Total 2052"},{"location":"code-analysis/wily-mi/","title":"wily-mi","text":"File Maintainability Index src/kpi.py 64.0474 src/REST/project_metrics.py 66.346 src/add_gha_wf.py 71.141 src/REST/get_repos.py 74.2132 src/get_repo_size.py 75.1686 src/REST/commits_over_time.py 75.5552 src/REST/add_badge.py 77.3041 src/wily_to_md.py 77.4476 src/GraphQL/gh_group_by_lang.py 79.5201 src/REST/group_by_tag.py 79.9072 src/util/get_gh_repo_content.py 83.0818 src/threading_add_gha_wf.py 83.7193 src/get_badge.py 84.1284 src/GraphQL/gh_get_popular_repos.py 84.7847 src/GraphQL/gh_get_largest_repos.py 86.2315 src/matrix_add_badge.py 87.9226 src/readme_sentiment.py 88.1981 src/util/repo_has_lang.py 88.442 src/REST/threading_add_badge.py 90.7044 src/util/get_gh_repos.py 94.727 src/util/get_readme_format.py 94.8362 src/config.py 97.4158 src/util/matrix_repos.py 98.3547 src/save_file_to_github.py 99.8446 src/remove_badge.py 100 src/GraphQL/gh_graphql_post.py 100 Total 86.768"},{"location":"query-results/commit-activity/","title":"Commit Activity","text":"<p>Commits over time</p>"},{"location":"query-results/group-by-lang/","title":"Group by lang","text":"Python Shell TypeScript HTML Dockerfile Jupyter Notebook R JavaScript Lua CSS Go PowerShell Cypher 0 AACT-Analysis AWS-recipes biblio-sphere browser-bookmarks code-vault codespaces-models Computation-Optimizations DHC dotfiles frontend-patterns kube-playground nn-private social-media-insights 1 advent-of-code homelab chess-explorer thenewthinktank.github.io hypothesis-testing web-application-jquery-and-bootstrap sous-chef performance 2 adventure-quests local-configs ts-snippets workout-generator mnist-classifier 3 algo-lib private-nn-dominodatalab sandbox 4 athlete twitter-novo 5 career-planner 6 dark-matter-attractor 7 datetime-tools 8 feedback-app 9 file-tools 10 fitness-tracker 11 geometry 12 home 13 Illustris-zoom-simulation 14 IllustrisTNG 15 key-master 16 N-body-simulations 17 nutrition-planner 18 online-learning 19 open-courier 20 personal-finance 21 polylang 22 profiling-tools 23 project-metrics 24 quantum-devops 25 scrape-and-notify 26 scRNA-seq 27 security-scanner 28 socials 29 sqlite-app 30 strava-insights 31 tomark 32 world-maps"},{"location":"query-results/popular-repos/","title":"Popular repos","text":"name description stars fitness-tracker Full stack fitness tracking application using Docker, TinyDB, FastAPI &amp; Svelte 20 code-vault recipes for BASH, Docker and more 13 nutrition-planner streamlit app for meal nutrition analysis 7 N-body-simulations Simulations of dynamical systems of particles under the influence of gravity 5 IllustrisTNG The next generation of cosmological hydrodynamical simulations of galaxy formation and evolution. 4 project-metrics Overview of projects and their health 3 athlete create athlete profiles to compute and analyze physiological metrics 3 sqlite-app CRUD functionality for SQLite database 3 dark-matter-attractor Analysis of simulated dark matter halos 3 workout-generator generate training programs for your strength workouts 2"},{"location":"query-results/repo-sizes/","title":"Repo Sizes","text":""},{"location":"query-results/repos-without-description/","title":"Repos without description","text":"name platform url description stars creation_date DHC github https://github.com/TheNewThinkTank/DHC None 2 2021-09-14T20:40:12Z interactive-musicology github https://github.com/TheNewThinkTank/interactive-musicology None 1 2023-04-09T17:19:20Z"}]}